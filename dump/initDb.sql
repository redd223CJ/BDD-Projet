-- Création des tables (Q1)

CREATE TABLE IF NOT EXISTS AGENCE (
    ID VARCHAR(50) PRIMARY KEY,
    NOM VARCHAR(50) UNIQUE NOT NULL,
    URL VARCHAR(200) NOT NULL,
    FUSEAU_HORAIRE VARCHAR(50) NOT NULL,
    TELEPHONE VARCHAR(50) NOT NULL,
    SIEGE VARCHAR(200) NOT NULL
);

CREATE TABLE IF NOT EXISTS ARRET_DESSERVI(
    ITINERAIRE_ID INT NOT NULL,
    ARRET_ID INT NOT NULL,
    SEQUENCE INT NOT NULL,
    PRIMARY KEY(ITINERAIRE_ID, SEQUENCE) 
);

CREATE TABLE IF NOT EXISTS ARRET(
    ID INT PRIMARY KEY,
    NOM VARCHAR(200) NOT NULL,
    LATITUDE DOUBLE NOT NULL, 
    LONGITUDE DOUBLE NOT NULL,
    CONSTRAINT check_latitude CHECK (LATITUDE BETWEEN -90 AND 90),
    CONSTRAINT check_longitude CHECK (LONGITUDE BETWEEN -180 AND 180)  
);

CREATE TABLE IF NOT EXISTS EXCEPTION(
    SERVICE_ID VARCHAR(50) NOT NULL,
    DATE DATE NOT NULL,
    CODE INT NOT NULL,
    PRIMARY KEY(SERVICE_ID, DATE),
    CONSTRAINT check_code CHECK (CODE IN (1, 2))
);

CREATE TABLE IF NOT EXISTS HORAIRE(
    TRAJET_ID VARCHAR(50) NOT NULL,
    ITINERAIRE_ID INT NOT NULL,
    ARRET_ID INT NOT NULL,
    HEURE_ARRIVEE TIME, -- pas NOT NULL car il y a des valeurs NULL dans horaire
    HEURE_DEPART TIME,
    PRIMARY KEY(TRAJET_ID, ARRET_ID)
);

CREATE TABLE IF NOT EXISTS ITINERAIRE(
    ID INT PRIMARY KEY,
    AGENCE_ID VARCHAR(50) NOT NULL,
    TYPE VARCHAR(10) NOT NULL,
    NOM VARCHAR(100) NOT NULL,
    UNIQUE (NOM, TYPE)
);

CREATE TABLE IF NOT EXISTS LANGUEPRINCIPALE(
    AGENCE_ID VARCHAR(50) NOT NULL,
    LANGUE VARCHAR(2) NOT NULL,
    PRIMARY KEY (AGENCE_ID, LANGUE)
);

CREATE TABLE IF NOT EXISTS SERVICE(
    ID VARCHAR(50) PRIMARY KEY,
    NOM VARCHAR(50) NOT NULL,
    LUNDI BOOLEAN NOT NULL,
    MARDI BOOLEAN NOT NULL,
    MERCREDI BOOLEAN NOT NULL,
    JEUDI BOOLEAN NOT NULL,
    VENDREDI BOOLEAN NOT NULL,
    SAMEDI BOOLEAN NOT NULL,
    DIMANCHE BOOLEAN NOT NULL,
    DATE_DEBUT DATE NOT NULL,
    DATE_FIN DATE NOT NULL,
    CONSTRAINT CHK_DATE_DEBUT_FIN CHECK (DATE_DEBUT <= DATE_FIN)
);

CREATE TABLE IF NOT EXISTS TRAJET(
    TRAJET_ID VARCHAR(50) PRIMARY KEY,
    SERVICE_ID VARCHAR(50) NOT NULL,
    ITINERAIRE_ID INT NOT NULL,
    DIRECTION INT NOT NULL,
    CONSTRAINT check_direction CHECK (DIRECTION IN (0, 1))
);

-- Modification des tables, pour clés étrangères (Q1)

ALTER TABLE ARRET_DESSERVI
    ADD FOREIGN KEY (ITINERAIRE_ID) REFERENCES ITINERAIRE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    ADD FOREIGN KEY (ARRET_ID) REFERENCES ARRET(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE EXCEPTION
    ADD FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE HORAIRE
    ADD FOREIGN KEY (TRAJET_ID) REFERENCES TRAJET(TRAJET_ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    ADD FOREIGN KEY (ITINERAIRE_ID) REFERENCES ITINERAIRE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    ADD FOREIGN KEY (ARRET_ID) REFERENCES ARRET(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE ITINERAIRE
    ADD FOREIGN KEY (AGENCE_ID) REFERENCES AGENCE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE LANGUEPRINCIPALE
    ADD FOREIGN KEY (AGENCE_ID) REFERENCES AGENCE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;

ALTER TABLE TRAJET
    ADD FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    ADD FOREIGN KEY (ITINERAIRE_ID) REFERENCES ITINERAIRE(ID)
        ON UPDATE CASCADE
        ON DELETE CASCADE;


-- Chargement des fichiers CSV (Q1)

LOAD DATA INFILE '/docker-entrypoint-initdb.d/AGENCE.CSV' INTO TABLE AGENCE FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/ITINERAIRE.CSV' INTO TABLE ITINERAIRE FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/ARRET.CSV' INTO TABLE ARRET FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/SERVICE.CSV' INTO TABLE SERVICE FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/TRAJET.CSV' INTO TABLE TRAJET FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/ARRET_DESSERVI.CSV' INTO TABLE ARRET_DESSERVI FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/HORAIRE.CSV' INTO TABLE HORAIRE FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS 
(TRAJET_ID, ITINERAIRE_ID, ARRET_ID, @HEURE_ARRIVEE, @HEURE_DEPART) 
SET
  HEURE_ARRIVEE = NULLIF(@HEURE_ARRIVEE, ''),
  HEURE_DEPART = NULLIF(@HEURE_DEPART, '');-- Nous avons changé le nom HORRAIRE.csv en HORAIRE.csv
LOAD DATA INFILE '/docker-entrypoint-initdb.d/EXCEPTION.CSV' INTO TABLE EXCEPTION FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;
LOAD DATA INFILE '/docker-entrypoint-initdb.d/LANGUEPRINCIPALE.CSV' INTO TABLE LANGUEPRINCIPALE FIELDS TERMINATED BY ',' ENCLOSED BY '"' IGNORE 1 ROWS;


-- Création des vues (Q4)

CREATE VIEW Dates_Services AS
WITH RECURSIVE RecDates(SERVICE_ID, NOM_SERVICE, LUNDI, MARDI, MERCREDI, JEUDI, VENDREDI, SAMEDI, DIMANCHE, DATE_ACTUELLE, DATE_FIN) AS
(SELECT ID, NOM, LUNDI, MARDI, MERCREDI, JEUDI, VENDREDI, SAMEDI, DIMANCHE, DATE_DEBUT, DATE_FIN
FROM SERVICE

UNION ALL

SELECT d.SERVICE_ID, d.NOM_SERVICE, d.LUNDI, d.MARDI, d.MERCREDI, d.JEUDI, d.VENDREDI, d.SAMEDI, d.DIMANCHE, DATE_ADD(d.DATE_ACTUELLE, INTERVAL 1 DAY), d.DATE_FIN
FROM RecDates d
WHERE d.DATE_ACTUELLE < d.DATE_FIN
)

SELECT DATE_ACTUELLE, NOM_SERVICE, SERVICE_ID FROM RecDates
WHERE (
    (DAYOFWEEK(DATE_ACTUELLE) = 1 AND DIMANCHE = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 2 AND LUNDI = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 3 AND MARDI = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 4 AND MERCREDI = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 5 AND JEUDI = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 6 AND VENDREDI = '1') OR
    (DAYOFWEEK(DATE_ACTUELLE) = 7 AND SAMEDI = '1')
);

CREATE VIEW DatesWithExceptions AS 
    SELECT d.DATE_ACTUELLE, d.NOM_SERVICE, d.SERVICE_ID
    FROM Dates_Services d
    LEFT JOIN EXCEPTION e 
    ON d.DATE_ACTUELLE = e.DATE AND d.SERVICE_ID = e.SERVICE_ID AND e.CODE = '2'
    WHERE e.SERVICE_ID IS NULL

    UNION ALL

    SELECT e.DATE, s.NOM, e.SERVICE_ID
    FROM SERVICE s
    JOIN EXCEPTION e ON s.ID = e.SERVICE_ID AND e.CODE = '1';
-- https://sql.sh/cours/jointures left join sans intersection de B

